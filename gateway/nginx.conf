worker_processes 1;
events { worker_connections 1024; }

http {
    # Backends
    upstream auth_service {server auth:8000;}
    upstream claims_service {server claims:8000;}

    # logs
    log_format json escape=json
      '{ "time":"$time_iso8601","remote":"$remote_addr","req":"$request",'
      '"status":$status,"bytes":$body_bytes_sent,"req_id":"$request_id",'
      '"tenant":"$tenant_id","upstream":"$upstream_addr","rt":"$request_time","urt":"$upstream_response_time" }';
    access_log /var/log/nginx/access.log json;
    error_log /var/log/nginx/error.log warn;

    # Capture headers returned by /_auth subreqeuest
    auth_request_set  $tenant_id $upstream_http_x_tenant_id;
    auth_request_set $user_id $upstream_http_x_user_id;

    server {
        listen 8000;

        # Cors(dev)
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type, X-Request-ID' always;
        add_header 'Access-Control-Expose-Headers' 'X-Tenant-ID, X-User-ID' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        if($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        location /auth/ {
            proxy_pass http://auth_service/;
            proxy_set_header Host $host;
        }

        location = /_auth/ {
            internal;
            proxy_pass http://auth_service/introspect;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Host $host;    
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header X-Original-Method $request_method;
        }

        location /claims/ {
            # auth_request /_auth;
            error_page 401 = @unauth;
            error_page 403 = @forbid;

            proxy_pass http://claims_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Tenant-ID $tenant_id;
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Request-ID $request_id;

            proxy_connect_timeout  1s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;

            proxy_next_upstream error timeout http_502 http_503;
        }

        location @unauth {
            return 401 '{"error": "unauthorized"}'; 
        }

        location @forbid {
            return 403 '{"error": "forbidden"}'; 
        }
    }
}