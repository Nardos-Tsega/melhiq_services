services:
  # ---- api gateway ----
  nginx:
    image: nginx:1.17
    container_name: gateway
    ports: ["8000:8000"]
    volumes:
      - ../gateway/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      auth:
        condition: service_healthy
      identity:
        condition: service_healthy

  # ---- auth service ----
  auth:
    build:
      context: ../services/auth
    container_name: auth
    expose: ["8000"]
    environment:
      DATABASE_URL: ${AUTH_DB_URL}
    volumes:
      - ../services/auth:/app
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [
          "CMD",
          "python",
          "-c",
          "import urllib.request,sys; \
          resp=urllib.request.urlopen('http://localhost:8000/healthz', timeout=2); \
          sys.exit(0) if resp.status < 400 else sys.exit(1)",
        ]
      interval: 5s
      timeout: 2s
      retries: 10
  identity:
    build:
      context: ../services/identity
    container_name: identity
    expose: ["8000"]
    environment:
      DATABASE_URL: ${IDENTITY_DB_URL}
    volumes:
      - ../services/identity:/app
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [
          "CMD",
          "python",
          "-c",
          "import urllib.request,sys; \
          resp=urllib.request.urlopen('http://localhost:8000/healthz', timeout=2); \
          sys.exit(0) if resp.status < 400 else sys.exit(1)",
        ]
      interval: 5s
      timeout: 2s
      retries: 10

  # ---- postgres ----
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
